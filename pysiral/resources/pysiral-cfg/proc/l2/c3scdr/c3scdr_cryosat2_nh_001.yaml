# Based on sicci2sit_protoC01_cryosat2_north.yaml and added with uncertainty tags and updated ssa smoothing

id: "C3S CryoSat-2 Arctic climate data record v1 (c3scdr_cryosat2_nh_010)"
version_tag: "v1.0c3s"

# Level 2 processor settings are mission specific
mission:
    id: cryosat2
    
# Regions Settings (for file selection and potential subsetting
hemisphere: north

# Sources of ancillary datasets
# (the tag "name" links to the corresponding tag in config/auxdata.yaml)
auxdata:
    
    - region:
         name: nsidc_mod
         options: null
    - mss:
         name: dtu15
         options:
             exception_on_error: True
             latitude_range: [50.0, 90.0]
    - sic:
         name: c3s_v1p2
         options:
            exception_on_error: True
    - sitype:
         name: c3s_v1p0
         options:
             exception_on_error: True
    - snow:
         name: warren99
         options:
              fyi_correction_factor: 0.5
              smooth_snow_depth: true
              smooth_filter_width_m: 25000.0
              valid_snow_depth_range: [0, 0.6]
              invalid_replace: .NAN

# geophysical corrections applied to the l1b range window
corrections:
    - dry_troposphere
    - wet_troposphere
    - inverse_barometric
    - ionospheric
    - ocean_tide_elastic
    - ocean_tide_long_period
    - ocean_loading_tide
    - solid_earth_tide
    - geocentric_polar_tide
    
# Surface type classification algorithm
surface_type:
    pyclass: SICCI2
    options:
        sar:
            ocean:
                peakiness_max: 5.0
                ice_concentration_min: 5.0
            lead:
                peakiness_min: [67.30, 66.30, 66.60, 69.90, 0.00, 0.00, 0.00, 0.00, 0.00, 76.00, 73.80, 68.60]
                sea_ice_backscatter_min: [23.80, 23.20, 23.30, 23.40, 0.00, 0.00, 0.00, 0.00, 0.00, 28.00, 25.80, 24.10]
                leading_edge_width_max: [0.77, 0.78, 0.78, 0.76, 0.00, 0.00, 0.00, 0.00, 0.00, 0.72, 0.73, 0.76]
                ice_concentration_min: 70.0
            sea_ice:
                peakiness_max: [30.50, 28.70, 28.10, 28.50, 0.00, 0.00, 0.00, 0.00, 0.00, 35.40, 34.90, 31.90]
                sea_ice_backscatter_min: 2.5
                sea_ice_backscatter_max: [20.80, 19.90, 19.60, 19.00, 0.00, 0.00, 0.00, 0.00, 0.00, 25.70, 23.20, 21.10]
                leading_edge_width_min: [1.02, 1.08, 1.10, 1.11, 0.00, 0.00, 0.00, 0.00, 0.00, 0.91, 0.90, 0.97]
                ice_concentration_min: 70.0
        sin:
            ocean:
                peakiness_max: 5.0
                ice_concentration_min: 5.0
            lead:
                peakiness_min: [264.30, 257.90, 253.60, 264.60, 0.00, 0.00, 0.00, 0.00, 0.00, 291.80, 288.80, 272.60]
                sea_ice_backscatter_min: [24.90, 25.00, 24.10, 24.50, 0.00, 0.00, 0.00, 0.00, 0.00, 29.00, 27.40, 25.80]
                leading_edge_width_max: [1.10, 1.11, 1.13, 1.09, 0.00, 0.00, 0.00, 0.00, 0.00, 1.02, 1.03, 1.07]
                ice_concentration_min: 70.0
            sea_ice:
                peakiness_max: [99.40, 94.20, 89.90, 90.00, 0.00, 0.00, 0.00, 0.00, 0.00, 114.40, 113.90, 103.80]
                sea_ice_backscatter_min: 2.5
                sea_ice_backscatter_max: [21.40, 20.90, 20.10, 19.10, 0.00, 0.00, 0.00, 0.00, 0.00, 24.30, 23.70, 22.00]
                leading_edge_width_min: [1.55, 1.58, 1.62, 1.64, 0.00, 0.00, 0.00, 0.00, 0.00, 1.44, 1.44, 1.51]
                ice_concentration_min: 70.0

# Retracking algorithm dependent on surface type
retracker:
    ocean:
        pyclass: NoneRetracker
        options: null
    lead:
        pyclass: cTFMRA
        options:
            # if arrays than [lrm, sar, sin]
            threshold: 0.5
            offset: 0.0
            wfm_oversampling_factor: 10
            wfm_oversampling_method: linear
            wfm_smoothing_window_size: [11, 11, 21]
            first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
            first_maximum_local_order: 1
            range_bias: [-0.022, 0.047, 0.017]
            uncertainty:
                type: fixed
                value: 0.1
    sea_ice:
        pyclass: cTFMRA
        options:
            # if arrays than [lrm, sar, sin]
            threshold: 0.5
            offset: 0.0
            wfm_oversampling_factor: 10
            wfm_oversampling_method: linear
            wfm_smoothing_window_size: [11, 11, 21]
            first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
            first_maximum_local_order: 1
            range_bias: [-0.022, 0.047, 0.017]
            uncertainty:
                type: fixed
                value: 0.1
            
# Algorithm for instantaneos sea surface height (mss + ssa) and radar freeboard
ssa:
    pyclass: SSASmoothedLinear
    options:
        use_ocean_wfm: False
        smooth_filter_width_m: 100000.0
        smooth_filter_width_footprint_size: 300.0
        pre_filtering: true
        pre_filter_maximum_mss_median_offset: 5.0 # in meter
        uncertainty_tiepoints_distance_max: 100000.
        uncertainty_minimum: 0.02
        uncertainty_maximum: 0.10
        marine_segment_filter:
            minimum_lead_number: 1
        tiepoint_maxdist_filter:
            maximum_distance_to_tiepoint: 200000.
            edges_only: false

# Estimation of Radar Freeboard
afrb:
    pyclass: RadarFreeboardDefault
    options: null

# Algorithm for converting radar freeboard into freeboard
frb:
    pyclass: SnowGeometricCorrection
    options:
        vacuum_light_speed_reduction: 0.22
        
# Algorithm for getting sea ice thickness from other l2 parameters
sit:
    pyclass: SeaIceFreeboardDefault
    options:
        water_density: 1024.0
        fyi_density: 916.7
        myi_density: 882.0
        # Base values for pure ice type uncertainties from Alexandrov et al., 2010, The Cryosphere
        uncertainty:
            fyi_density: 35.7
            myi_density: 23.0
        
# List of filter at different stages of l2 procesing
# (can be list of filters)
filter:

    # Filters after freeboard computation
    freeboard:
        frb_valid_range:
            pyclass: L2ParameterValidRange
            filter_target: frb
            options:
                valid_minimum_point_value: -0.25
                valid_maximum_point_value: 2.25
                
    # Filters after thickness computation
    thickness:
        frb_valid_range:
            pyclass: L2ParameterValidRange
            options:
                valid_minimum_point_value: -0.5
                valid_maximum_point_value: 10.5
                
# Tests if l1b orbit file is valid
validator:

    # Tests (Can be several) after surface type classification
    surface_type:
        n_leads:
            pyclass: LeadFixedMinimumNumber
            options:
                minimum_n_leads: 3
        
# Post-Processing (tbd if needed)
post_processing: null
